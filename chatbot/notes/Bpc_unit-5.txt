Unit 5: Basic programing in CNotes BuddyTop ContributorsNotes About usGitHubTwitterToggle Menu Change Font & SizeUnit 5: Basic programing in CBPC 1st Semester 1st Year Medicaps University Declaration, Initialization, Pointers and Arrays, Pointers and Structures, Pointers and Functions
Pointers in C
A pointer is a variable that stores the memory address of another variable. Pointers are powerful and allow for efficient memory management, dynamic memory allocation, and passing large data structures to functions.
1. Declaration of Pointers
Pointers are declared using the * operator.
Syntax:
data_type *pointer_name;
Example:
int *ptr;  // Pointer to an integer
char *cptr; // Pointer to a character
float *fptr; // Pointer to a float

2. Initialization of Pointers
Pointers are initialized by assigning them the address of a variable using the address-of operator (&).
Example:
int num = 10;
int *ptr = &num;  // Pointer initialized with the address of num
 
printf("Value of num: %d\n", *ptr);  // Dereferencing the pointer

3. Pointers and Arrays
Pointers can be used to traverse arrays because the name of an array acts as a pointer to its first element.
Example:
int arr[5] = {1, 2, 3, 4, 5};
int *ptr = arr;  // Pointer to the first element of the array
 
for (int i = 0; i < 5; i++) {
    printf("Element %d: %d\n", i, *(ptr + i));  // Accessing using pointer arithmetic
}

4. Pointers and Structures
Pointers can also point to structures. They are useful for dynamically allocating memory for structures and accessing their members.
Example:
struct Student {
    int roll_no;
    char name[50];
};
 
struct Student s1 = {101, "Alice"};
struct Student *ptr = &s1;
 
printf("Roll No: %d\n", ptr->roll_no);  // Accessing using the arrow operator (->)
printf("Name: %s\n", ptr->name);

5. Pointers and Functions
Pointers can be used to:

Pass variables by reference to functions, allowing the function to modify the original variable.
Return dynamically allocated memory from functions.

Passing Pointers to Functions:
void increment(int *ptr) {
    (*ptr)++;  // Increment the value at the pointer's address
}
 
int main() {
    int num = 10;
    increment(&num);
    printf("Incremented Value: %d\n", num);  // Output: 11
    return 0;
}
Returning Pointers from Functions:
int* allocateMemory() {
    int *ptr = (int *)malloc(sizeof(int));  // Dynamic memory allocation
    *ptr = 42;
    return ptr;
}
 
int main() {
    int *p = allocateMemory();
    printf("Value: %d\n", *p);  // Output: 42
    free(p);  // Free allocated memory
    return 0;
}

Key Points

Dereferencing (*): Access the value at the memory address stored in the pointer.
Address-of Operator (&): Retrieve the memory address of a variable.
Null Pointer: A pointer that points to nothing (NULL).
int *ptr = NULL;

Pointer Arithmetic: Incrementing or decrementing pointers moves them to the next or previous memory location of the type they point to.


Applications of Pointers

Dynamic Memory Allocation: Using functions like malloc, calloc, and free.
Efficient Function Calls: Passing large data structures by reference.
Data Structures: Building linked lists, trees, and graphs.
File Handling: Managing file streams using pointers.


Advanced Pointer Concepts in C
In addition to basic pointer usage, C provides advanced features like command-line arguments, dynamic memory allocation, and operations on pointers for efficient and flexible programming.

1. Command Line Arguments
Command-line arguments allow users to pass inputs to the program during execution.
Syntax:
int main(int argc, char *argv[]) {
    // argc: Number of arguments
    // argv: Array of argument strings
}
Example:
#include <stdio.h>
 
int main(int argc, char *argv[]) {
    printf("Number of arguments: %d\n", argc);
    for (int i = 0; i < argc; i++) {
        printf("Argument %d: %s\n", i, argv[i]);
    }
    return 0;
}

2. Dynamic Memory Allocation
Dynamic memory allocation allows programs to allocate memory at runtime using functions provided in the <stdlib.h> library.
Functions for Memory Allocation:

malloc: Allocates a block of memory and returns a pointer to it.
calloc: Allocates memory for an array and initializes it to zero.
realloc: Resizes a previously allocated block of memory.
free: Frees allocated memory.

Example:
#include <stdio.h>
#include <stdlib.h>
 
int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
 
    // Dynamic memory allocation using malloc
    int *arr = (int *)malloc(n * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }
 
    // Input and display array elements
    for (int i = 0; i < n; i++) {
        arr[i] = i + 1;
    }
 
    printf("Array elements: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
 
    // Free allocated memory
    free(arr);
    return 0;
}

3. Operations on Pointers
Pointers support various operations, such as arithmetic, comparison, and dereferencing.
Pointer Arithmetic:

Increment (++): Moves the pointer to the next memory location.
Decrement (--): Moves the pointer to the previous memory location.

Example:
#include <stdio.h>
 
int main() {
    int arr[] = {10, 20, 30, 40};
    int *ptr = arr;
 
    printf("Pointer value: %d\n", *ptr);  // Output: 10
    ptr++;
    printf("Pointer value after increment: %d\n", *ptr);  // Output: 20
    return 0;
}Previous12345MailTwitterGitHubRamxcodes